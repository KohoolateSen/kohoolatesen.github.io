[{"url":"https://kohoolatesen.github.io/hall-of-fame/","title":"","description":null,"body":"\nSilicon Saints\nTheir code still runs beneath your apps, Forgotten by many, but fundamental to everything.\n","path":null},{"url":"https://kohoolatesen.github.io/hall-of-fame/lorem/","title":"Ipsum","description":null,"body":"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim aeque doleamus animo, cum corpore dolemus, fieri tamen permagna accessio potest, si aliquod aeternum et infinitum impendere malum nobis opinemur. Quod idem licet transferre in voluptatem, ut postea.\nUllus investigandi veri, nisi inveneris, et quaerendi defatigatio turpis est, cum esset accusata et vituperata ab Hortensio. Qui liber cum et mortem contemnit, qua qui est imbutus quietus esse numquam potest. Praeterea bona praeterita grata recordatione renovata delectant. Est.\nUllus investigandi veri, nisi inveneris, et quaerendi defatigatio turpis est, cum esset accusata et vituperata ab Hortensio. Qui liber cum et mortem contemnit, qua qui est imbutus quietus esse numquam potest. Praeterea.\n","path":null},{"url":"https://kohoolatesen.github.io/","title":"Home","description":null,"body":"\n\t\n\n\n\nIntro\nWelcome to the Internet Dumpster!\nBut don’t be fooled — not all dumpsters are filled with trash.\nNot everyone is willing to dig through the mess — but for those who do, there are treasures waiting beneath the grime.\nThis site is where I share my “useful bullshits” — thoughts, tools, and tips mostly around networking, cybersecurity, programming, IT, and whatever else catches my interest in the tech world. You’ll find all that in the Blog section.\nOver in the Hall of Fame, I often highlight pioneers of the Computer &amp; IT industry — people whose contributions deserve more recognition than they get.\nThanks for dropping by.\nHope you find something that makes the dig worthwhile.\n– KohoolateSen\n","path":null},{"url":"https://kohoolatesen.github.io/about/","title":"About","description":null,"body":"This section provides brief information about the authors and their backgrounds.\n\nSadra ( aka KohoolateSen )\n\n\n\nKohoolateSen\n\n\nComputer Networking Enthusiast, Developer.\nExperienced in configuring and managing networks using MikroTik RouterOS and Cisco IOS.\n\nmotd\n\nRun a syslog server for your home router ? Watch a flood of malicious traffic hit, leaving you chugging benzodiazepines to survive the logpocalypse. poor SoC specialists …\n\n\nTechnologies\n\n\n","path":null},{"url":"https://kohoolatesen.github.io/blog/","title":"","description":null,"body":"\nWritings of Authors\nWelcome to the blog section, we write about various stuff here ;)\n","path":null},{"url":"https://kohoolatesen.github.io/blog/bcp38/","title":"BCP38, The Guardian Against IP Spoofing","description":null,"body":"\nWhat Is BCP38?\nBCP38 (Best Current Practice 38), also known as Ingress Filtering and defined in RFC 2827, is a security standard designed to prevent IP spoofing at the network edge. By validating source IP addresses, it ensures only legitimate traffic enters or exits a network.\nWhy BCP38 Matters\nTo understand BCP38’s importance, we must first examine the risks posed by IP spoofing. While IP spoofing itself isn’t inherently malicious, it enables high-impact attacks such as:\n\nDDoS Amplification Attacks\nAnonymized Network Scans\nBypassing Access Controls\n\nExample: DDoS Amplification Attack\nLet’s break down how a DDoS amplification attack unfolds:\nAttack Workflow:\n\nThe attacker sends crafted requests to these open services, spoofing the source IP address to match the victim’s IP.\nIf BCP38 is not enforced, these spoofed packets reach the open services unchecked.\nEach service responds to the victim’s IP, flooding it with traffic.\nThe victim’s resources are overwhelmed, leading to service downtime.\n\nBCP38 disrupts this chain by blocking spoofed packets at the source network’s edge.\n\n\t\n\t\tNote\n\tBCP38, Despite being published in 2000, many ISPs still neglect BCP38 implementation. This gap explains why spoofed traffic remains prevalent in large-scale attacks.\n\n\n\nHow BCP38 Works\nBCP38 enforces ingress filtering on edge router interfaces. It verifies whether incoming packets’ source IP addresses align with the network’s valid IP prefixes. Two primary implementation methods exist:\n1. Unicast Reverse Path Forwarding (uRPF)\nuRPF is the most efficient method for implementing BCP38 on Cisco devices. It cross-checks a packet’s source IP against the router’s routing table to validate legitimacy.\nModes of Operation:\n\nStrict Mode: Drops packets if the source IP isn’t reachable via the interface they arrived on. Best for symmetric routing environments.\nLoose Mode: Only checks if the source IP exists in the routing table, regardless of the interface. Useful for asymmetric routing (less secure).\n\nConfiguration Example:\nEnable uRPF in strict mode on a Cisco interface:\n\n\nrx enables strict mode.\nFor loose mode, replace rx with any:\n\n\n2. Access Control Lists (ACLs)\nACLs provide an alternative method to implement BCP38\nby filtering packets based on their source IP addresses.\nThis approach explicitly allows only packets with source\nIPs from your network’s range and denies all others.\nWhile less scalable than uRPF, it’s useful when uRPF\nisn’t practical, such as in asymmetric routing scenarios.\nHow it works ?\n\nDefine an ACL that permits packets with source IPs\nmatching your network’s range.\nApply the ACL outbound on interfaces to ensure only\nlegitimate traffic exits.\n\nConfiguration Example:\nSuppose your network uses the IP range 192.168.32.0/24.\nConfigure an ACL like this:\n\n\nThis allows only packets with source IPs in 192.168.32.0/24\nto leave the interface.\n\nInability to Block In-Range Spoofed IP Addresses\nBCP38 effectively filters out packets with source IP addresses that\nfall outside the network’s legitimate range. However, it cannot prevent\nspoofing of IP addresses within the allowed range. For example, an attacker\ninside the network or one who spoofs an in-range IP\n(e.g., from a compromised device) can still send malicious packets\nthrough the gateway. This limitation means BCP38 offers no protection\nagainst internal threats or attacks that exploit legitimate IP ranges,\nrequiring additional security measures to address such risks.\nConlusion\nWhile BCP38 plays a crucial role in preventing such threats, it is not sufficient on its own. It represents just one of many measures and standards used to mitigate these types of attacks.\n","path":null}]